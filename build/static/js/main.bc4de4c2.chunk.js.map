{"version":3,"sources":["components/LocationMarker.js","components/LocationInfoBox.js","components/Map.js","components/spinner.gif","components/Loader.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","className","icon","locationIcon","LocationInfoBox","info","id","title","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","index","categories","geometries","coordinates","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAYeA,EARQ,SAAC,GAA0B,EAAxBC,IAAwB,EAAnBC,IAAoB,IAAfC,EAAc,EAAdA,QAChC,OACI,qBAAKC,UAAU,kBAAkBD,QAAUA,EAA3C,SACI,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qBCOjCG,EAZS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACI,qBAAKJ,UAAU,gBAAf,SACI,+BACI,qDACZ,uCAAS,iCAAUI,EAAKC,QACxB,0CAAY,iCAAUD,EAAKE,iBCCzBC,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAAW,EACDC,mBAAS,MADR,mBAClCC,EADkC,KACpBC,EADoB,KAGnCC,EAAUN,EAAUO,KAAI,SAACC,EAAIC,GAC/B,OANuB,IAMpBD,EAAGE,WAAW,GAAGb,GACT,cAAC,EAAD,CAA4BR,IAAKmB,EAAGG,WAAW,GAAGC,YAAY,GAAItB,IAAKkB,EAAGG,WAAW,GAAGC,YAAY,GAAIrB,QAAS,kBAAMc,EAAgB,CAAER,GAAIW,EAAGX,GAAIC,MAAOU,EAAGV,UAAzIW,GAEzB,QAGX,OACI,sBAAKjB,UAAU,MAAf,UACI,cAAC,IAAD,CACIqB,iBAAkB,CAAEC,IAAK,2CACzBC,cAAgBd,EAChBe,YAAcd,EAHlB,SAKKI,IAEJF,GAAgB,cAAC,EAAD,CAAiBR,KAAMQ,QAKpDL,EAAIkB,aAAe,CACfhB,OAAQ,CACJZ,IAAK,QACLC,KAAM,UAEVY,KAAM,GAGKH,QCzCA,MAA0B,oCCW1BmB,EATA,WACX,OACI,sBAAK1B,UAAU,SAAf,UACI,qBAAK2B,IAAKC,EAASC,IAAI,YACvB,mDCMGC,EARA,WACX,OACI,qBAAK9B,UAAU,SAAf,SACI,+BAAI,cAAC,OAAD,CAAMC,KAAMC,MAAhB,2CCwBG6B,MA1Bf,WAAgB,IAAD,EACoBpB,mBAAS,IAD7B,mBACPH,EADO,KACIwB,EADJ,OAEgBrB,oBAAS,GAFzB,mBAEPsB,EAFO,KAEEC,EAFF,KAkBb,OAdAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAAM,mDAFN,cAEZC,EAFY,gBAGOA,EAAIC,OAHX,gBAGVC,EAHU,EAGVA,OAERR,EAAaQ,GACbN,GAAW,GANO,4CAAH,qDASjBO,GAEAC,QAAQC,IAAInC,KACX,IAED,gCACE,cAAC,EAAD,IACAyB,EAA0C,cAAC,EAAD,IAAhC,cAAC,EAAD,CAAKzB,UAAWA,IAF5B,QCZWoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bc4de4c2.chunk.js","sourcesContent":["import { Icon } from '@iconify/react'\r\nimport locationIcon from '@iconify/icons-mdi/fire-alert'\r\n\r\n\r\nconst LocationMarker = ({ lat, lng, onClick }) => {\r\n    return (\r\n        <div className=\"location-marker\" onClick={ onClick }>\r\n            <Icon icon={locationIcon} className=\"location-icon\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationMarker\r\n","\r\n\r\nconst LocationInfoBox = ({ info }) => {\r\n    return (\r\n        <div className=\"location-info\">\r\n            <ul>\r\n                <h1>Event Location Info</h1>\r\n    <li>ID : <strong>{ info.id }</strong></li>\r\n    <li>TITLE : <strong>{ info.title }</strong></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationInfoBox\r\n","  \r\nimport { useState } from 'react'\r\nimport GoogleMapReact from 'google-map-react'\r\nimport LocationMarker from './LocationMarker'\r\nimport LocationInfoBox from './LocationInfoBox'\r\n\r\n// define constants\r\nconst NATURAL_EVENT_WILDFIRE = 8;\r\n\r\nconst Map = ({ eventData, center, zoom }) => {\r\n    const [locationInfo, setLocationInfo] = useState(null)\r\n\r\n    const markers = eventData.map((ev, index) => {\r\n        if(ev.categories[0].id === NATURAL_EVENT_WILDFIRE) {\r\n            return <LocationMarker key={index} lat={ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]} onClick={() => setLocationInfo({ id: ev.id, title: ev.title })} />\r\n        }\r\n        return null\r\n    })\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <GoogleMapReact\r\n                bootstrapURLKeys={{ key: 'AIzaSyCsR2KOA-7NTJfjVRDzLsOkjZvugU1hdi8' }}\r\n                defaultCenter={ center }\r\n                defaultZoom={ zoom }\r\n            >\r\n                {markers}\r\n            </GoogleMapReact>\r\n            {locationInfo && <LocationInfoBox info={locationInfo} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nMap.defaultProps = {\r\n    center: {\r\n        lat: 42.3265,\r\n        lng: -122.8756\r\n    },\r\n    zoom: 6\r\n}\r\n\r\nexport default Map\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/spinner.868a6998.gif\";","import spinner from \"./spinner.gif\"\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <img src={spinner} alt=\"loading\"/>\r\n            <h1>Fetching data</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import { Icon } from '@iconify/react'\r\nimport locationIcon from '@iconify/icons-mdi/fire-alert'\r\n//import LocationInfoBox from './LocationInfoBox'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1><Icon icon={locationIcon}/>Wildfire Tracker (Powered By NASA)</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { useState, useEffect } from 'react'\nimport Map from './components/Map'\nimport Loader from './components/Loader'\nimport Header from './components/Header'\n\nfunction App() {\n  const[eventData, setEventData] = useState([])\n  const[loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true)\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const { events } = await res.json()\n\n      setEventData(events)\n      setLoading(false)\n    }\n\n    fetchEvents()\n\n    console.log(eventData);\n  }, [])\n  return (\n    <div>\n      <Header />\n    {!loading ? <Map eventData={eventData} /> : <Loader />} {/* if not loading then show the map component but if loading show the loader component */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}